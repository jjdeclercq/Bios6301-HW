k.ix <- which(x2[,'pos']=='k')
qb.ix <- which(x2[,'pos']=='qb')
rb.ix <- which(x2[,'pos']=='rb')
te.ix <- which(x2[,'pos']=='te')
wr.ix <- which(x2[,'pos']=='wr')
# calculate marginal points by subtracting "baseline" player's points
x2[k.ix, 'marg'] <- x2[k.ix,'points'] - x2[k.ix[nTeams],'points']
x2[qb.ix, 'marg'] <- x2[qb.ix,'points'] - x2[qb.ix[nTeams],'points']
x2[rb.ix, 'marg'] <- x2[rb.ix,'points'] - x2[rb.ix[2*nTeams],'points']
x2[te.ix, 'marg'] <- x2[te.ix,'points'] - x2[te.ix[nTeams],'points']
x2[wr.ix, 'marg'] <- x2[wr.ix,'points'] - x2[wr.ix[3*nTeams],'points']
# create a new data.frame subset by non-negative marginal points
x3 <- x2[x2[,'marg'] >= 0,]
# re-order by marginal points
x3 <- x3[order(x3[,'marg'], decreasing=TRUE),]
# reset the row names
rownames(x3) <- NULL
# calculation for player value
x3[,'value'] <- x3[,'marg']*(nTeams*cap-nrow(x3))/sum(x3[,'marg']) + 1
# create a data.frame with more interesting columns
x4 <- x3[,c('PlayerName','pos','points','value')]
## save dollar values as CSV file
write.csv(x4, file)
## return data.frame with dollar values
return(x4)
}
x1 <- ffvalues('.')
# path: directory path to input files
# file: name of the output file; it should be written to path
# nTeams: number of teams in league
# cap: money available to each team
# posReq: number of starters for each position
# points: point allocation for each category
ffvalues <- function(path, file='outfile.csv', nTeams=12, cap=200,
posReq=c(qb=1, rb=2, wr=3, te=1, k=1),
points=c(fg=4, xpt=1, pass_yds=1/25, pass_tds=4, pass_ints=-2,
rush_yds=1/10, rush_tds=6, fumbles=-2, rec_yds=1/20,
rec_tds=6)) {
#read in csv files
positions <- c('k','qb','rb','te','wr')
year <- 2016
csvfile <- paste('proj_', positions, substr(year, 3, 4), '.csv', sep='')
files <- file.path(year, csvfile)
print(files)
names(files) <- positions
k <- read.csv(files['k'], header=TRUE, stringsAsFactors=FALSE)
qb <- read.csv(files['qb'], header=TRUE, stringsAsFactors=FALSE)
rb <- read.csv(files['rb'], header=TRUE, stringsAsFactors=FALSE)
te <- read.csv(files['te'], header=TRUE, stringsAsFactors=FALSE)
wr <- read.csv(files['wr'], header=TRUE, stringsAsFactors=FALSE)
# generate unique list of column names
cols <- unique(c(names(k), names(qb), names(rb), names(te), names(wr)))
# create a new column in each data.frame
# values are recylcled
k[,'pos'] <- 'k'
qb[,'pos'] <- 'qb'
rb[,'pos'] <- 'rb'
te[,'pos'] <- 'te'
wr[,'pos'] <- 'wr'
# append 'pos' to unique column list
cols <- c(cols, 'pos')
# create common columns in each data.frame
# initialize values to zero
k[,setdiff(cols, names(k))] <- 0
qb[,setdiff(cols, names(qb))] <- 0
rb[,setdiff(cols, names(rb))] <- 0
te[,setdiff(cols, names(te))] <- 0
wr[,setdiff(cols, names(wr))] <- 0
# combine data.frames by row, using consistent column order
x <- rbind(k[,cols], qb[,cols], rb[,cols], te[,cols], wr[,cols])
## calculate dollar values
x[,'p_fg'] <- x[,'fg']*points['fg']
x[,'p_xpt'] <- x[,'xpt']*points['xpt']
x[,'p_pass_yds'] <- x[,'pass_yds']*points['pass_yds']
x[,'p_pass_tds'] <- x[,'pass_tds']*points['pass_tds']
x[,'p_pass_ints'] <- x[,'pass_ints']*points['pass_ints']
x[,'p_rush_yds'] <- x[,'rush_yds']*points['rush_yds']
x[,'p_rush_tds'] <- x[,'rush_tds']*points['rush_tds']
x[,'p_fumbles'] <- x[,'fumbles']*points['fumbles']
x[,'p_rec_yds'] <- x[,'rec_yds']*points['rec_yds']
x[,'p_rec_tds'] <- x[,'rec_tds']*points['rec_tds']
# sum selected column values for every row
x[,'points'] <- rowSums(x[,grep("^p_", names(x))])
# create new data.frame ordered by points descendingly
x2 <- x[order(x[,'points'], decreasing=TRUE),]
# determine the row indeces for each position
k.ix <- which(x2[,'pos']=='k')
qb.ix <- which(x2[,'pos']=='qb')
rb.ix <- which(x2[,'pos']=='rb')
te.ix <- which(x2[,'pos']=='te')
wr.ix <- which(x2[,'pos']=='wr')
# calculate marginal points by subtracting "baseline" player's points
x2[k.ix, 'marg'] <- x2[k.ix,'points'] - x2[k.ix[nTeams],'points']
x2[qb.ix, 'marg'] <- x2[qb.ix,'points'] - x2[qb.ix[nTeams],'points']
x2[rb.ix, 'marg'] <- x2[rb.ix,'points'] - x2[rb.ix[2*nTeams],'points']
x2[te.ix, 'marg'] <- x2[te.ix,'points'] - x2[te.ix[nTeams],'points']
x2[wr.ix, 'marg'] <- x2[wr.ix,'points'] - x2[wr.ix[3*nTeams],'points']
# create a new data.frame subset by non-negative marginal points
x3 <- x2[x2[,'marg'] >= 0,]
# re-order by marginal points
x3 <- x3[order(x3[,'marg'], decreasing=TRUE),]
# reset the row names
rownames(x3) <- NULL
# calculation for player value
x3[,'value'] <- x3[,'marg']*(nTeams*cap-nrow(x3))/sum(x3[,'marg']) + 1
# create a data.frame with more interesting columns
x4 <- x3[,c('PlayerName','pos','points','value')]
## save dollar values as CSV file
write.csv(x4, file)
## return data.frame with dollar values
return(x4)
}
x1 <- ffvalues('.')
# path: directory path to input files
# file: name of the output file; it should be written to path
# nTeams: number of teams in league
# cap: money available to each team
# posReq: number of starters for each position
# points: point allocation for each category
ffvalues <- function(path, file='outfile.csv', nTeams=12, cap=200,
posReq=c(qb=1, rb=2, wr=3, te=1, k=1),
points=c(fg=4, xpt=1, pass_yds=1/25, pass_tds=4, pass_ints=-2,
rush_yds=1/10, rush_tds=6, fumbles=-2, rec_yds=1/20,
rec_tds=6)) {
#read in csv files
positions <- c('k','qb','rb','te','wr')
year <- 2016
csvfile <- paste('proj_', positions, substr(year, 3, 4), '.csv', sep='')
files <- file.path(year, csvfile)
names(files) <- positions
k <- read.csv(files['k'], header=TRUE, stringsAsFactors=FALSE)
qb <- read.csv(files['qb'], header=TRUE, stringsAsFactors=FALSE)
rb <- read.csv(files['rb'], header=TRUE, stringsAsFactors=FALSE)
te <- read.csv(files['te'], header=TRUE, stringsAsFactors=FALSE)
wr <- read.csv(files['wr'], header=TRUE, stringsAsFactors=FALSE)
# generate unique list of column names
cols <- unique(c(names(k), names(qb), names(rb), names(te), names(wr)))
# create a new column in each data.frame
# values are recylcled
k[,'pos'] <- 'k'
qb[,'pos'] <- 'qb'
rb[,'pos'] <- 'rb'
te[,'pos'] <- 'te'
wr[,'pos'] <- 'wr'
# append 'pos' to unique column list
cols <- c(cols, 'pos')
# create common columns in each data.frame
# initialize values to zero
k[,setdiff(cols, names(k))] <- 0
qb[,setdiff(cols, names(qb))] <- 0
rb[,setdiff(cols, names(rb))] <- 0
te[,setdiff(cols, names(te))] <- 0
wr[,setdiff(cols, names(wr))] <- 0
# combine data.frames by row, using consistent column order
x <- rbind(k[,cols], qb[,cols], rb[,cols], te[,cols], wr[,cols])
## calculate dollar values
x[,'p_fg'] <- x[,'fg']*points['fg']
x[,'p_xpt'] <- x[,'xpt']*points['xpt']
x[,'p_pass_yds'] <- x[,'pass_yds']*points['pass_yds']
x[,'p_pass_tds'] <- x[,'pass_tds']*points['pass_tds']
x[,'p_pass_ints'] <- x[,'pass_ints']*points['pass_ints']
x[,'p_rush_yds'] <- x[,'rush_yds']*points['rush_yds']
x[,'p_rush_tds'] <- x[,'rush_tds']*points['rush_tds']
x[,'p_fumbles'] <- x[,'fumbles']*points['fumbles']
x[,'p_rec_yds'] <- x[,'rec_yds']*points['rec_yds']
x[,'p_rec_tds'] <- x[,'rec_tds']*points['rec_tds']
# sum selected column values for every row
x[,'points'] <- rowSums(x[,grep("^p_", names(x))])
# create new data.frame ordered by points descendingly
x2 <- x[order(x[,'points'], decreasing=TRUE),]
# determine the row indeces for each position
k.ix <- which(x2[,'pos']=='k')
qb.ix <- which(x2[,'pos']=='qb')
rb.ix <- which(x2[,'pos']=='rb')
te.ix <- which(x2[,'pos']=='te')
wr.ix <- which(x2[,'pos']=='wr')
# calculate marginal points by subtracting "baseline" player's points
x2[k.ix, 'marg'] <- x2[k.ix,'points'] - x2[k.ix[nTeams],'points']
x2[qb.ix, 'marg'] <- x2[qb.ix,'points'] - x2[qb.ix[nTeams],'points']
x2[rb.ix, 'marg'] <- x2[rb.ix,'points'] - x2[rb.ix[2*nTeams],'points']
x2[te.ix, 'marg'] <- x2[te.ix,'points'] - x2[te.ix[nTeams],'points']
x2[wr.ix, 'marg'] <- x2[wr.ix,'points'] - x2[wr.ix[3*nTeams],'points']
# create a new data.frame subset by non-negative marginal points
x3 <- x2[x2[,'marg'] >= 0,]
# re-order by marginal points
x3 <- x3[order(x3[,'marg'], decreasing=TRUE),]
# reset the row names
rownames(x3) <- NULL
# calculation for player value
x3[,'value'] <- x3[,'marg']*(nTeams*cap-nrow(x3))/sum(x3[,'marg']) + 1
# create a data.frame with more interesting columns
x4 <- x3[,c('PlayerName','pos','points','value')]
## save dollar values as CSV file
write.csv(x4, file)
## return data.frame with dollar values
return(x4)
}
x1 <- ffvalues('.')
nrow(x1[x1[,'value'] > 20,])
x1$PlayerName[x1$pos == 'rb'][15]
x2 <- ffvalues(getwd(), '16team.csv', nTeams=16, cap=150)
nrow(x2[x2[,'value'] > 20,])
nrow(na.exclude(x2[1:40,][x2$pos == 'wr',]))
x3 <- ffvalues('.', 'qbheavy.csv', posReq=c(qb=2, rb=2, wr=3, te=1, k=0),
points=c(fg=0, xpt=0, pass_yds=1/25, pass_tds=6, pass_ints=-2,
rush_yds=1/10, rush_tds=6, fumbles=-2, rec_yds=1/20, rec_tds=6))
nrow(x3[x3[,'value'] > 20,])
nrow(na.exclude(x3[1:30,][x3$pos == 'qb',]))
x3[x3$value>20,]
rm(list=ls())
# secant method
test  <- function(x) cos(x) - x   #any function
test_deriv <- function(x) -sin(x) - 1   #the derivative of the function
secant <- function(fun, x_0, x_1){
threshold <- 1e-5
while (abs(x_0 - x_1) > threshold){
older = x_0
old = x_1
x_0 = old
x_1 = old - fun(old)*(old - older)/(fun(old) - fun(older))
}
return (x_1)
}
# newton-raphson method
newton <- function(F1, F2, guess){
threshold <- 1e-5
x_0 = guess
x_1 = guess - F1(guess)/F2(guess)
while(abs(x_0 - x_1) > threshold){
x_0 = x_1
x_1 = x_1 - F1(x_1)/F2(x_1)
}
return (x_1)
}
n = 1e5
system.time(replicate(n, newton(test, test_deriv, 0)))
system.time(replicate(n, secant(test, 0, 3.14/2)))
Q1 <- secant(test, 0, 3.14/2) # make a reasonable guess of ranges
x <- sum(ceiling(6*runif(2)))
craps <- function(roll1=NA){
temp  <-  sum(ceiling(6*runif(2)))
if(is.na(roll1)){
roll1 = temp
if(roll1 == 7 || roll1 == 11){
return ("You win")
}
else{
return (craps(roll1))
}
}
else{
if(temp == 7 | temp == 11){
return ("You lose")
}
else if(temp == roll1){
return ("You win")
}
else{
return (craps(roll1))
}
}
}
set.seed(100)
craps()
craps()
craps()
res <- rep(NA, 10)
for(i in seq(1:1000)){
set.seed(i)
for(j in 1:10){
res[j] <- craps()
}
if('You lose' %in% res == FALSE){
print (i)
}
}
ffvalues <- function(path, file='outfile.csv', nTeams=12, cap=200, posReq=c(qb=1, rb=2, wr=3, te=1, k=1),
points=c(fg=4, xpt=1, pass_yds=1/25, pass_tds=4, pass_ints=-2,
rush_yds=1/10, rush_tds=6, fumbles=-2, rec_yds=1/20, rec_tds=6)) {
#read in the CSV files
#setwd("~/Desktop")
k <- read.csv('proj_k16.csv', header=TRUE, stringsAsFactors=FALSE)
qb <- read.csv('proj_qb16.csv', header=TRUE, stringsAsFactors=FALSE)
rb <- read.csv('proj_rb16.csv', header=TRUE, stringsAsFactors=FALSE)
te <- read.csv('proj_te16.csv', header=TRUE, stringsAsFactors=FALSE)
wr <- read.csv('proj_wr16.csv', header=TRUE, stringsAsFactors=FALSE)
#calculate dollar values
cols <- unique(c(names(k), names(qb), names(rb), names(te), names(wr)))
k[,'pos'] <- 'k'
qb[,'pos'] <- 'qb'
rb[,'pos'] <- 'rb'
te[,'pos'] <- 'te'
wr[,'pos'] <- 'wr'
cols <- c(cols, 'pos')
k[,setdiff(cols, names(k))] <- 0
qb[,setdiff(cols, names(qb))] <- 0
rb[,setdiff(cols, names(rb))] <- 0
te[,setdiff(cols, names(te))] <- 0
wr[,setdiff(cols, names(wr))] <- 0
x <- rbind(k[,cols], qb[,cols], rb[,cols], te[,cols], wr[,cols])
x[,'p_fg'] <- x[,'fg']*points['fg']
x[,'p_xpt'] <- x[,'xpt']*points['xpt']
x[,'p_pass_yds'] <- x[,'pass_yds']*points['pass_yds']
x[,'p_pass_tds'] <- x[,'pass_tds']*points['pass_tds']
x[,'p_pass_ints'] <- x[,'pass_ints']*points['pass_ints']
x[,'p_rush_yds'] <- x[,'rush_yds']*points['rush_yds']
x[,'p_rush_tds'] <- x[,'rush_tds']*points['rush_tds']
x[,'p_fumbles'] <- x[,'fumbles']*points['fumbles']
x[,'p_rec_yds'] <- x[,'rec_yds']*points['rec_yds']
x[,'p_rec_tds'] <- x[,'rec_tds']*points['rec_tds']
x[,'points'] <- rowSums(x[,grep("^p_", names(x))])
x2 <- x[order(x[,'points'], decreasing=TRUE),]
k.ix <- which(x2[,'pos']=='k')
qb.ix <- which(x2[,'pos']=='qb')
rb.ix <- which(x2[,'pos']=='rb')
te.ix <- which(x2[,'pos']=='te')
wr.ix <- which(x2[,'pos']=='wr')
x2[k.ix, 'marg'] <- x2[k.ix,'points'] - x2[k.ix[nTeams*posReq['k']],'points']
x2[qb.ix, 'marg'] <- x2[qb.ix,'points'] - x2[qb.ix[nTeams*posReq['qb']],'points']
x2[rb.ix, 'marg'] <- x2[rb.ix,'points'] - x2[rb.ix[nTeams*posReq['rb']],'points']
x2[te.ix, 'marg'] <- x2[te.ix,'points'] - x2[te.ix[nTeams*posReq['te']],'points']
x2[wr.ix, 'marg'] <- x2[wr.ix,'points'] - x2[wr.ix[nTeams*posReq['wr']],'points']
x3 <- x2[x2[,'marg'] >= 0,]
x3 <- x3[order(x3[,'marg'], decreasing=TRUE),]
rownames(x3) <- NULL
x3[,'value'] <- x3[,'marg']*(nTeams*cap-nrow(x3))/sum(x3[,'marg']) + 1
x4 <- x3[,c('PlayerName','pos','points','value')]
# save dollar values as CSV file
write.csv(file=file,x4)
# return data.frame with dollar values
return(x4)
}
x1 <- ffvalues('.')
sum(x1$value>20)
x1[which(x1$pos=='rb'),][15,1]
x2 <- ffvalues(getwd(), '16team.csv', nTeams=16, cap=150)
sum(x2$value>20)
top40<-x2[1:40,]
length(top40[which(top40$pos=='wr'),1])
x3 <- ffvalues('.', 'qbheavy.csv', posReq=c(qb=2, rb=2, wr=3, te=1, k=0),
points=c(fg=0, xpt=0, pass_yds=1/25, pass_tds=6, pass_ints=-2,
rush_yds=1/10, rush_tds=6, fumbles=-2, rec_yds=1/20, rec_tds=6))
rm(list=ls())
secant <- function(f, x0, x1, tol = 1e-7, maxiter = 1000) {
for (i in 1:maxiter) {
x2 <- x1 - f(x1) / ((f(x1) - f(x0)) / (x1 - x0))
if (abs(x2 - x1) < tol) {
return(x2)
}
x0 <- x1
x1 <- x2
}
}
funct <- function(x) cos(x) - x
secant(funct, 0, 1)
system.time(replicate(1000, secant(funct, 0, 1)))
newton <- function(guess, f, fp, tol=10e-7, maxiter=1000) {
i <- 1
while(abs(f(guess))>tol && i < maxiter) {
guess <- guess - f(guess)/fp(guess)
i <- i+1
}
if(i == maxiter) {
return(NULL)
}
else {
}
guess
}
f <- function(x) -sin(x)-1
fp <- function(x) -cos(x)
newton(10, f, fp)
system.time(replicate(1000, newton(10,f,fp)))
craps <- function(n) {
win<-0
loss<-0
groll<-0
results = data.frame(win, loss)
set.seed(100)
for (y in 1:n)  {
a <- sum(ceiling(6*runif(2)))
numroll <- 1
if  ((a==7)||(a==11)) {
results[,'win'] <- results[,'win'] + 1
print("First roll win!")
print(numroll)
}
z<-(a == 7)||(a == 11)
if  (z==FALSE)  {
point <- a
repeat  {
a2 <- sum(ceiling(6*runif(2)))
numroll <- numroll + 1
if  ((a2 == 7) || (a2 == 11)) {
results[,'loss'] <- results[,'loss'] + 1
print("You lost!")
print(numroll)
break
}
if  ((a2==point)) {
results[,'win'] <- results[,'win'] + 1
print("You won!")
print(numroll)
break
}
}
}
groll <- groll + numroll
results[,'rolls'] <- groll
}
print(results)
}
craps(3)
result <- logical(1)
craps <- function(n, s) {
win<-0
loss<-0
groll<-0
results = data.frame(win, loss)
set.seed(s)
for (y in 1:n)  {
a <- sum(ceiling(6*runif(2)))
numroll <- 1
if  ((a==7)||(a==11)) {
results[,'win'] <- results[,'win'] + 1
result <- T
print("First roll win!")
print(numroll)
}
z<-(a == 7)||(a == 11)
if  (z==FALSE)  {
point <- a
repeat  {
a2 <- sum(ceiling(6*runif(2)))
numroll <- numroll + 1
if  ((a2 == 7) || (a2 == 11)) {
results[,'loss'] <- results[,'loss'] + 1
result <- F
print("You lost!")
print(numroll)
break
}
if  ((a2==point)) {
results[,'win'] <- results[,'win'] + 1
result <- T
print("You won!")
print(numroll)
break
}
}
}
groll <- groll + numroll
results[,'rolls'] <- groll
}
print(results)
}
s1 <- 1
while(sum(replicate(10, result) == T) != 10) {
s1 <- s1+1
}
s1
craps(3)
craps <- function(n) {
win<-0
loss<-0
groll<-0
results = data.frame(win, loss)
set.seed(100)
for (y in 1:n)  {
a <- sum(ceiling(6*runif(2)))
numroll <- 1
if  ((a==7)||(a==11)) {
results[,'win'] <- results[,'win'] + 1
print("First roll win!")
print(numroll)
}
z<-(a == 7)||(a == 11)
if  (z==FALSE)  {
point <- a
repeat  {
a2 <- sum(ceiling(6*runif(2)))
numroll <- numroll + 1
if  ((a2 == 7) || (a2 == 11)) {
results[,'loss'] <- results[,'loss'] + 1
print("You lost!")
print(numroll)
break
}
if  ((a2==point)) {
results[,'win'] <- results[,'win'] + 1
print("You won!")
print(numroll)
break
}
}
}
groll <- groll + numroll
results[,'rolls'] <- groll
}
print(results)
}
craps(3)
length(which(arg_length == 0))
library(plyr)
objs <- mget(ls("package:base"), inherits = TRUE)
funs <- Filter(is.function, objs)
argument.nums <- laply(funs, function(x)(length(formals(x))))
max.args <- which(argument.nums == max(argument.nums))
names(funs[max.args])
length(which(arg_length == 0))
replicate(10,1)
replicate(10,1)==T
